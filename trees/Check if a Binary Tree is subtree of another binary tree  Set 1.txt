#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct node
{
    int num;
    struct node *left,*right;
};
struct node *createnode(int num)
{
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
bool subtreeidential(struct node *root,struct node *root2)
{
    if(root == NULL && root2==NULL)
    {
        return true;
    }
    if(root2==NULL || root==NULL)
    {
        return false;
    }
    
    return ((root->num==root2->num)&&subtreeidential(root->left,root2->left)&& subtreeidential(root->right,root2->right));
}
bool subtree(struct node *root,struct node *root2)
{
    if(root==NULL && root2==NULL)
    {
        return true;
    }
    if(subtreeidential(root,root2))
    {
        return true;
    }
    int n=subtreeidential(root->left,root2);
    int n1=subtreeidential(root->right,root2);
    printf("%d%d ",n,n1);
    return n||n1;
}
int main()
{
    struct node *root=createnode(26);
    root->left=createnode(10);
    root->left->left=createnode(4);
    root->left->right=createnode(6);
    root->left->left->right=createnode(30);
    root->right=createnode(3);
    root->right->right=createnode(3);
    
    struct node *root2=createnode(10);
    root2->left=createnode(4);
    root2->right=createnode(6);
    root2->left->right=createnode(30);
    int res=subtree(root,root2);
    printf("%d ",res);
    if(res)
    {
        printf("yes");
    }
    else
    {
        printf("no");
    }
}