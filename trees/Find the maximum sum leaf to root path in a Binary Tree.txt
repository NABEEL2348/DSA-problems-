#include<stdio.h>
#include<stdlib.h>
struct node{
    int num;
    struct node *left,*right;
};
struct node *createnode(int num)
{
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
struct node *lca(struct node *root,int num1,int num2)
{
    if(root== NULL)
    {
        return NULL;
    }
    if(root->num==num1 || root->num==num2)
    {
        return root;
    }
    struct node  *leftbca=lca(root->left,num1,num2);
    struct node *rightbca=lca(root->right,num1,num2);
    
    if(leftbca && rightbca)
    {
        return root;
    }
    if(leftbca!=NULL)
    {
        return leftbca;//if left and right in same subtree means it helps
    }//and this leftbca and rightbca is need because we not tell which node will found in leftbca left left=4 and right is 6 it found fcfs manner in above findlca code
    else
    
    {
        return rightbca;
    }
}
int findlevel(struct node *root,int num,int level)
{
    if(root==NULL)
    {
        return 1;
    }
   
    if(root->num==num)
    {
        return level;
    }
    
    int left=findlevel(root->left,num,level+1);
   int right=findlevel(root->right,num,level+1);
   return (left>right)?left:right;
}
int finddistance(struct node *root,int a,int b)
{
    struct node *findlca=lca(root,a,b);  //to seperate only two number spot to avoid confusion;
    int left=findlevel(findlca,a,0);
    int right=findlevel(findlca,b,0);
    return left+right;
    
}
int main()
{
    struct node *root=createnode(1);
    root->left=createnode(2);
    root->right=createnode(3);
    root->left->left=createnode(4);
    root->left->right=createnode(5);
    root->right->left=createnode(6);
    root->right->right=createnode(7);
    int a=4,b=6;
    printf("%d",finddistance(root,a,b));
}