#include<stdio.h>
#include<stdlib.h>
struct node
{
    int num;
    struct node *left,*right;
};
struct node *createnode(struct node *root,int num)
{
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
struct node *insert(struct node *root,int num)
{
    if(root==NULL)
    {
        return createnode(root,num);
    }
    if(num<root->num)
    {
        root->left=insert(root->left,num);
    }
    else if(num>root->num)
    {
        root->right=insert(root->right,num);
    }
    return root;
}
void bstarr(struct node *root,int arr1[10],int *index)
{
    if(root==NULL)
    {
        return;
    }
   
    bstarr(root->left,arr1,index);
    arr1[(*index)++]=root->num;
    bstarr(root->right,arr1,index);
}
void inorder(struct node *root)
{
    if(root==NULL)
    {
        return;
    }
    
    inorder(root->left);
    inorder(root->right);
    printf("%d ",root->num);
    
}
struct node *transformmaxbst(struct node *root,int arr1[],int *index)
{
    if(root==NULL)
    {
        return NULL;
    }
    transformmaxbst(root->left,arr1,index);
    transformmaxbst(root->right,arr1,index);
    root->num=arr1[(*index)++];
    return root;
}
int main()
{
    struct node *root=NULL;
    root=insert(root,4);
    root=insert(root,2);
    root=insert(root,1);
    root=insert(root,3);
    root=insert(root,6);
    root=insert(root,5);
    root=insert(root,7);
    int arr1[10];
    int index=0;
    inorder(root);
    bstarr(root,arr1,&index);
    int index1=0;
    printf("\n");
    root=transformmaxbst(root,arr1,&index1);
    inorder(root);
}