#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct job
{
    int start;
    int end;
};
int compare(const void *a,const void *b)
{
    struct job *job1=(struct job*)a;
    struct job *job2=(struct job*)b;
    return (job1->start-job2->start);
}
int mergeinterval(struct job *jobs,int n,int *count)
{
    qsort(jobs,n,sizeof(struct job),compare);
    int start=INT_MAX;
    int end=0;
    struct job jobs2[n+1];
    int i=0;
    int flag=0;
    while(i<n)
    {
        
        if(jobs[i].end>jobs[i+1].start&& i<n-1)
        {
            if(i<n)
            {
                
           
                start=jobs[i].start;
                end=jobs[i].end;
                while(end>jobs[i+1].start && i<n)
                {
                  
                    if(jobs[i+1].start<start)
                    {
                        start=jobs[i+1].start;
                    }
                    else if(jobs[i+1].end>end)
                    {
                        end=jobs[i+1].end;
                    }
                    i++;
                }
               
                jobs2[(*count)].start=start;
                jobs2[(*count)++].end=end;
            }
        }
        else
        {
            jobs2[(*count)++]=jobs[i];
        }
        i++;
        
    }
    for(int i=0;i<*count;i++)
    {
        printf("%d %d\n",jobs2[i].start,jobs2[i].end);
    }
}
int main()
{
    struct job jobs[]={
      {1,3},{2,6},{8,10},{15,18}
  };
  int n=sizeof(jobs)/sizeof(jobs[0]);
  
  int count=0;
  mergeinterval(jobs,n,&count);
  
}