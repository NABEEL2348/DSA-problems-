#include<stdio.h>
#include<stdlib.h>
struct node{
    int num;
    struct node *next;
};
int create(struct node **head,int num)
{
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->next=NULL;
    if(*head==NULL)
    {
        *head=newnode;
    }
    else
    {
        struct node *tptr=*head;
        while(tptr->next!=NULL)
        {
            tptr=tptr->next;
        }
        tptr->next=newnode;
    }
}
int display(struct node *head)
{
    struct node *tptr=head;
    while(tptr!=NULL)
    {
        printf("%d ",tptr->num);
        tptr=tptr->next;
    }
}
struct node *segregateevenorodd(struct node **head)
{
    struct node *tptr=*head;
    struct node *oddhead=NULL,*oddtail=NULL;
    struct node *evenhead=NULL,*eventail=NULL;
    while(tptr!=NULL)
    {
        if(tptr->num%2==0)
        {
            if(evenhead==NULL)
            {
                evenhead=tptr;
                eventail=tptr;
            }
            else
            {
                eventail->next=tptr;
                eventail=tptr;
            }
        }
        else
        {
            if(oddhead==NULL)
            {
                oddhead=tptr;
                oddtail=tptr;
            }
            else
            {
                oddtail->next=tptr;
                oddtail=tptr;
            }
        }
        tptr=tptr->next;
    }
    if(eventail!=NULL)
    {
        *head=evenhead;
        eventail->next=oddhead;
    }
    else
    {
        *head=oddhead;
    }
    if(oddtail!=NULL)
    {
        oddtail->next=NULL;
    }
}
int main()
{
    struct node *head=NULL;
    create(&head,1);
    create(&head,2);
    create(&head,3);
    create(&head,4);
    create(&head,5);
    //display(head);
    segregateevenorodd(&head);
    display(head);
}