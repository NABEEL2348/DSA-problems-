#include<stdio.h>
#include<stdlib.h>
#define max_size 100
struct node{
    int data;
    struct node *next;
};
struct queuenode{
    int row;
    int col;
};
struct queuenode *queue(int capacity)
{
    struct queuenode *queue=(struct queuenode*)malloc(sizeof(struct queuenode));
}
int enclaves(int grid[][max_size],int row,int col)
{
    int visited[max_size][max_size];
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            visited[i][j]=0;
        }
    }
    struct queuenode queue[max_size];
    int front=0,rear=-1;
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            if(grid[i][j]==1)
            {
                if(i==0 || j==0 || i==col-1 || j==row-1)
                {
                    visited[i][j]=1;
                    queue[++rear]=(struct queuenode) {i,j};
                    
                }
            }
        }
    }
    
    while(front<=rear)
    {
        int rows=queue[front].row;
        int cols=queue[front].col;
        front++;
        
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        for(int i=0;i<4;i++)
        {
            int nrow=rows+delrow[i];
            int ncol=cols+delcol[i];
            
            if(nrow>=0 && nrow<row && ncol>=0 && ncol<col && !visited[nrow][ncol] && grid[nrow][ncol]==1)
            {
                queue[++rear]=(struct queuenode) {nrow,ncol};
                visited[nrow][ncol]=1;
            }
        }
    }
    int count=0;
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            if(grid[i][j]==1 && visited[i][j]!=1)
            {
                count++;
            }
        }
    }
    return count;
}
int main()
{
    int grid[max_size][max_size]={
        {0, 0, 0, 0},
        {1, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 0}
    };
    int row=4;
    int col=4;
    int result=enclaves(grid,row,col);
    printf("%d",result);
}