#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<stdbool.h>
#define max_size 100
struct queuenode{
    char words[max_size+1];
    int steps;
};
int iscompareofworddiff(char word[],char word1[])
{
    int m=strlen(word);
    int n=strlen(word1);
    int diff=0;
    if(m!=n)
    {
        return false;
    }
    else
    {
        for(int i=0;i<m;i++)
        {
            if(word[i]!=word1[i])
            {
                diff++;
            }
        }
    }
    if(diff==1)
    {
        return diff==1;
    }
    return false;
}
int wordladder(char *words[],char *wordliststart,char *wordend,int wordsize)
{
    struct queuenode *queue=(struct queuenode*)malloc(sizeof(struct queuenode)*max_size);
    bool *visited= (bool*)calloc(wordsize,sizeof(bool));
    int front=0,rear=0;
    strcpy(queue[rear].words,wordliststart);
    queue[rear].steps=1;
    rear++;
    while(front<=rear)
    {
        struct queuenode current=queue[front];
        if(strcmp(current.words,wordend)==0)
        {
            free(visited);
            free(queue);
            return current.steps;
        }
        
        for(int i=0;i<wordsize;i++)
        {
            if(!visited[i] && iscompareofworddiff(current.words,words[i]))
            {
                visited[i]=true;
                strcpy(queue[rear].words,words[i]);
                queue[rear].steps=current.steps+1;
                rear++;
            }
        }
        front++;
    }
}
int main()
{
    char *words[]={"hot","dot","dog","lot","log","cog"};
    char *wordliststart="hit";
    char *wordend="cog";
    int wordcount=wordladder(words,wordliststart,wordend,sizeof(words)/sizeof(words[0]));
    printf("%d ",wordcount);
}
