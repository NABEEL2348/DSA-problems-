#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define size 100

#define rotten 2
#define fresh 1

struct queuenode{
    int capacity,front,rear;
    int *arr;
};
struct queuenode *createqueue(int capacity)
{
    struct queuenode *queue=(struct queuenode*)malloc(sizeof(struct queuenode));
    queue->capacity=capacity;
    queue->front=-1;
    queue->rear=-1;
    queue->arr=(int *)malloc(capacity*sizeof(int));
    return queue;
}
bool isempty(struct queuenode *queue)
{
    return (queue->front==-1);
}
bool isfull(struct queuenode *queue)
{
    return (queue->rear==queue->capacity-1);
}
bool isvalid(int row,int col,int rows,int cols)
{
    return (row>=0 && row<rows && col>=0 &&col<cols);
}
void enqueue(struct queuenode *queue,int item)
{
    if(isfull(queue))
    {
        printf("the queue is full");
    }
    queue->rear++;
    queue->arr[queue->rear]=item;
    if(queue->front==-1)
    {
        queue->front=0;
}
}
int dequeue(struct queuenode *queue)
{
    if(isempty(queue))
    {
        printf("the queue is empty");
        exit(1);
    }
    int item=queue->arr[queue->front];
    queue->front++;
    if(queue->front>queue->rear)
    {
        queue->front=queue->rear=-1;
    }
    return item;
}
bool isfresh(int grid[size][size],int row,int col)
{
    return (grid[row][col]==fresh);
}
bool isrooten(int grid[size][size],int row,int col)
{
    return (grid[row][col]==rotten);
}
int addminrotten(int grid[size][size],int adjrow,int adjcol,int row,int col,struct queuenode *queue)
{
    int x[] = {-1, 0, 1, 0};
    int y[] = {0, 1, 0, -1};
    for(int i=0;i<4;i++)
    {
        int adjrows=adjrow+x[i];
        int adjcols=adjcol+y[i];
        if(isvalid(adjrows,adjcols,row,col) && isfresh(grid,adjrows,adjrows))
        {
            grid[adjrows][adjcols]=rotten;
            enqueue(queue,adjrows*col+adjcols);
        }
    }
}
int minrottenoranges(int grid[size][size],int row,int col)
{
    struct queuenode *queue=createqueue(row*col);
    int total=0;
    int count=0;
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            if(grid[i][j]!=0)
            {
                total++;
            }
            if(isrooten(grid,i,j))
            {
                enqueue(queue,i*col+j);
            }
        }
    }
    int days=0;
    
    while(!isempty(queue))
    {
        int level=queue->rear-queue->front+1;
        for(int i=0;i<level;i++)
        {
            int rottenindex=dequeue(queue);
            int rottenrow=rottenindex/col;
            int rottencol=rottenindex%col;
            addminrotten(grid,rottenrow,rottencol,row,col,queue);
            count++;
        }
        if(!isempty(queue))
        {
            days++;
        }
    }
    return (total==count)?days:-1;
}
int main()
{
    int grid[size][size]={
        {2, 1, 1},
        {1, 1, 0},
        {0, 1, 1}
    };
    int row=3;
    int col=3;
    int rottenoranges=minrottenoranges(grid,row,col);
    printf("the total number of days for rotten oranges is %d",rottenoranges);
}