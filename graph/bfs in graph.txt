#include<stdio.h>
#include<stdlib.h>
struct graphnode{
    int data;
    struct graphnode* next;
};
struct queue{
    int capacity;
    int *array;
    int front,rear;
};
struct graphnode* createnode(int data)
{
    struct graphnode* newnode=(struct graphnode*)malloc(sizeof(struct graphnode));
    newnode->data=data;
    newnode->next=NULL;
    return newnode;
};
struct queue *createqueue(int n)
{
    struct queue* queue1=(struct queue*)malloc(sizeof(struct queue));
    queue1->front=-1;
    queue1->rear=-1;
    queue1->capacity=n;
    queue1->array=(int *)malloc(n*sizeof(int));
    return queue1;
}
int isempty(struct queue* queue1)
{
    return (queue1->front==-1);
}
void enqueue(struct queue* queue1,int data)
{
    if (queue1->rear == queue1->capacity - 1) {
        printf("Queue is full\n");
        return;
    }
    if(isempty(queue1))
    {
         queue1->front=0;
    }
    queue1->rear++;
    queue1->array[queue1->rear]=data;
    
}
int deque(struct queue* queue1)
{
    if(isempty(queue1))
    {
        return -1;
    }
    int item=queue1->array[queue1->front];
    queue1->front++;
    if(queue1->front>queue1->rear)
    {
        queue1->front=queue1->rear=-1;
    }
    return item;
}
void bfs(struct graphnode* adjancenylist[],int n,int start)
{
    int visited[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=0;
    }
    struct queue* queue1=createqueue(n);
    visited[start]=1;
    enqueue(queue1,start);
    while(!isempty(queue1))
    {
        int current=deque(queue1);
        printf("%d ",current);
        struct graphnode* temp=adjancenylist[current];
        while(temp!=NULL)
        {
            int neighbour=temp->data;
            if(!visited[neighbour])
            {
                visited[neighbour]=1;
                enqueue(queue1,neighbour);
            }
            temp=temp->next;
        }
        
    }
    free(queue1->array);
    free(queue1);
}
int addedge(struct graphnode *adjancenylist[],int src,int dest)
{
    struct graphnode* newnode=createnode(dest);
    newnode->next=adjancenylist[src];
    adjancenylist[src]=newnode;
    //undirected graphnode
    newnode = createnode(src);
    newnode->next=adjancenylist[src];
    adjancenylist[src]=newnode;
}
int main()
{
    int n=6;
    struct graphnode* adjancenylist[n];
    addedge(adjancenylist,0,1);
    addedge(adjancenylist,0,2);
    addedge(adjancenylist,1,3);
    addedge(adjancenylist,1,4);
    addedge(adjancenylist,2,4);
    addedge(adjancenylist,3,5);
    addedge(adjancenylist,4,5);
    bfs(adjancenylist,n,0);
}



#include<stdio.h>
#include<stdlib.h>
struct graphnode
{
    int num;
    struct graphnode *next;
};
struct graphnode *createnode(int num)
{
    struct graphnode *newnode=(struct graphnode*)malloc(sizeof(struct graphnode));
    newnode-> num=num;
    newnode->next=NULL;
    return newnode;
}
int addedge(struct graphnode **adjancenylist,int src,int dest)
{
    struct graphnode *current=createnode(dest);
    current->next=adjancenylist[src];
    adjancenylist[src]=current;
    
    current=createnode(src);
    current->next=adjancenylist[dest];
    adjancenylist[dest]=current;
}
int print(struct graphnode **adjancenylist,int n)
{
    for(int i=0;i<n;i++)
    {
        struct graphnode *current =adjancenylist[i];
        printf("%d:",i);
        while(current!=NULL)
        {
            printf("%d ",current->num);
            current=current->next;
        }
        printf("\n");
    }
}
int bfs(struct graphnode **adjancenylist,int n,int start)
{
    int visited[n];
    for(int i=0;i<n;i++)
    {
        visited[i]=0;
    }
    visited[start]=1;
    
        int queue[100];
        int front=0;
        int rear=-1;
        queue[++rear]=start;
        while(front<=rear)
        {
            int temp=queue[front++];
            
            struct graphnode *temp1=adjancenylist[temp];
            printf("%d ",temp);
            while(temp1!=NULL)
            {
                if(visited[temp1->num]==0)
                {
                    visited[temp1->num]=1;
                    queue[++rear]=temp1->num;
                }
                temp1=temp1->next;
            }
            
            
        }
        
    
}
int main()
{
    int n=6;
    struct graphnode *adjancenylist[n];
    addedge(adjancenylist,0,1);
    addedge(adjancenylist,0,2);
    addedge(adjancenylist,1,3);
    addedge(adjancenylist,1,4);
    addedge(adjancenylist,2,4);
    addedge(adjancenylist,3,5);
    addedge(adjancenylist,4,5);
    print(adjancenylist,n);
    printf("\n");
    bfs(adjancenylist,n,0);
    
}