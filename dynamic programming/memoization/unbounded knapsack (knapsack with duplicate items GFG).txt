
class Solution {
    static int max(int a,int b)
    {
        return (a>b)?a:b;
    }
    static int f(int val[],int wt[],int n,int dp[][],int capacity)
    {
        if(capacity ==0)
        {
            return 0;
        }
        if(n<0)
        {
            return 0;
        }
        if(dp[n][capacity]!=-1)
        {
            return dp[n][capacity];
        }
        int nottake=f(val,wt,n-1,dp,capacity);
        int take=0;
        if(wt[n]<=capacity)
        {
            take=val[n]+f(val,wt,n,dp,capacity-wt[n]);
        }
        return dp[n][capacity]=max(take,nottake);
        
        
        
    }
    static int knapSack(int val[], int wt[], int capacity) {
        int n=val.length;
        int[][] dp=new int[n+1][capacity+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=capacity;j++)
            {
                dp[i][j]=-1;
            }
        }
        return f(val,wt,n-1,dp,capacity);
        
    }
}