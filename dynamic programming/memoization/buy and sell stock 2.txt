int f(int *arr,int n,int **dp,int ind,int buy)
{
    if(ind==n)
    {
        return 0;
    }
    if(dp[ind][buy]!=-1)
    {
        return dp[ind][buy];
    }
   
    if(buy)
    {
        dp[ind][buy]=fmax((-arr[ind]+f(arr,n,dp,ind+1,0)),(0+f(arr,n,dp,ind+1,1)));
    }
    else
    {
        dp[ind][buy]=fmax((arr[ind]+f(arr,n,dp,ind+1,1)),(0+f(arr,n,dp,ind+1,0)));
    }
    return dp[ind][buy];
}
int  maxProfit(int* arr, int n) {
    int **dp = malloc(n * sizeof(int *));
for (int i = 0; i < n; i++) {
    dp[i] = malloc(2 * sizeof(int)); 
    for (int j = 0; j < 2; j++) {
        dp[i][j] = -1; 
    }
}

    return f(arr,n,dp,0,1);
}