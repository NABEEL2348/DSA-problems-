1(java) 2)c
1)
//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int N = sc.nextInt();
            int M = sc.nextInt();

            int[][] grid = new int[N][M];
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }

            Solution obj = new Solution();
            long res = obj.solve(N, M, grid);
            System.out.println(res);
        
System.out.println("~");
}
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    static int max(int a,int b)
    {
        return (a>b)?a:b;
    }
    static int f(int i,int j1,int j2,int m,int n,int grid[][],int dp[][][])
    {
        if(j1<0 || j1>n || j2<0 || j2>n)
    {
        return 0;
    }
    
    int value=0;;
    if(dp[i][j1][j2]!=-1)
    {
        return dp[i][j1][j2];
    }
    if(i==m)
    {
        if(j1==j2)
        {
            return grid[i][j2];
        }
        else
        {
            return grid[i][j1]+grid[i][j2];
        }
    }
    int res=Integer.MIN_VALUE;
    for(int l=-1;l<=1;l++)
    {
        for(int k=-1;k<=1;k++)
        {
            if(j1==j2)
            {
                value=grid[i][j1];
            }
            else
            {
                value=grid[i][j1]+grid[i][j2];
            }
            value+=f(i+1,j1+l,j2+k,m,n,grid,dp);
            res=max(res,value);
        }
    }
    return dp[i][j1][j2]=res;
    }
    public int solve(int n, int m, int grid[][]) {
        int[][][] dp=new int[n+1][m+1][m+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                for(int k=0;k<m;k++)
                {
                    dp[i][j][k]=-1;
                }
            }
        }
        int res=f(0,0,m-1,n-1,m-1,grid,dp);
        return res;
        
    }  
}
2)
#include<stdio.h>
#include<string.h>
#include<limits.h>
int max(int a,int b)
{
    return (a>b)?a:b;
}
int ninjaandhisfriends(int grid[4][3],int i,int j1,int j2,int m,int n,int dp[m+1][n+1][n+1])
{
    
    if(j1<0 || j1>n || j2<0 || j2>n)
    {
        return 0;
    }
    
    int value=0;;
    if(i==m)
    {
        if(j1==j2)
        {
            return grid[i][j2];
        }
        else
        {
            return grid[i][j1]+grid[i][j2];
        }
    }
    int res=INT_MIN;
    for(int l=-1;l<=1;l++)
    {
        for(int k=-1;k<=1;k++)
        {
            if(j1==j2)
            {
                value=grid[i][j1];
            }
            else
            {
                value=grid[i][j1]+grid[i][j2];
            }
            value+=ninjaandhisfriends(grid,i+1,j1+l,j2+k,m,n,dp);
            res=max(res,value);
        }
    }
    return res;
    
}
int main()
{
    int m = 4, n = 3;
    int grid[4][3] = {{3,1,1},{2,5,1},{1,5,5},{2,1,1}};
    int dp[m+1][n+1][n+1];
    memset(dp,-1,sizeof(dp));
    printf("%d",ninjaandhisfriends(grid,0,0,n-1,m-1,n-1,dp));
}