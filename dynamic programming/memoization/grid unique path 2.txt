

    #include<stdio.h>
#include<string.h>
#include<stdlib.h>
int uniquepaths(int arr[2][2],int m,int n,int **dp)
{
    
    if(m==0 && n==0)
    {
        return 1;
    }
    if(m<0 || n<0)
    {
        return 0;
    }
    if(arr[m][n]==1)
    {
        return 0;
    }
    dp[m][n]=uniquepaths(arr,m-1,n,dp)+uniquepaths(arr,m,n-1,dp);
    return dp[m][n];
    
}
int main()
{
    int arr[2][2]={{0,1},{0,0}};
    int n=2;
    int m=2;
    int** dp = (int**)malloc((m+1) * sizeof(int*));//due to leakage the memory should be dynamic instead of static
    for (int i = 0; i <= m; i++) {
        dp[i] = (int*)malloc((n+1) * sizeof(int));
        for (int j = 0; j <= n; j++) {
            dp[i][j] = -1;
        }
    }
    printf("%d ",uniquepaths(arr,m-1,n-1,dp));
}

    #include<stdio.h>
#include<string.h>
#include<stdlib.h>
int uniquepaths(int arr[2][2],int m,int n,int **dp)
{
    
    if(m==0 && n==0)
    {
        return 1;
    }
    if(m<0 || n<0)
    {
        return 0;
    }
    if(arr[m][n]==1)
    {
        return 0;
    }
    dp[m][n]=uniquepaths(arr,m-1,n,dp)+uniquepaths(arr,m,n-1,dp);
    return dp[m][n];
    
}
int main()
{
    int arr[2][2]={{0,1},{0,0}};
    int n=2;
    int m=2;
    int** dp = (int**)malloc((m+1) * sizeof(int*));//due to leakage the memory should be dynamic instead of static
    for (int i = 0; i <= m; i++) {
        dp[i] = (int*)malloc((n+1) * sizeof(int));
        for (int j = 0; j <= n; j++) {
            dp[i][j] = -1;
        }
    }
    printf("%d ",uniquepaths(arr,m-1,n-1,dp));
}