class Solution {
    static int max(int a,int b)
    {
        return (a>b)?a:b;
    }
    
    public int solve(int n, int m, int grid[][]) {
        int[][][] dp=new int[n+1][m+1][m+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                for(int k=0;k<m;k++)
                {
                    dp[i][j][k]=0;
                }
            }
        }
        
        for(int j1=0;j1<m;j1++)
        {
            for(int j2=0;j2<m;j2++)
            {
                if(j1==j2)
                {
                    dp[n-1][j1][j2]=grid[n-1][j1];
                }
                else
                {
                    dp[n-1][j1][j2]=grid[n-1][j1]+grid[n-1][j2];
                }
            }
        }
        int value=0;;
        for(int i=n-2;i>=0;i--)
        {
            for(int j1=0;j1<m;j1++)
            {
                for(int j2=0;j2<m;j2++)
                {
                     int res=Integer.MIN_VALUE;
                    for(int l=-1;l<=1;l++)
                    {
                        for(int k=-1;k<=1;k++)
                        {
                            if(j1==j2)
                            {
                                value=grid[i][j1];
                            }
                            else
                            {
                                value=grid[i][j1]+grid[i][j2];
                            }
                            if(j1+l>=0 && j1+l<m && j2+k>=0 && j2+k<m)
                            {
                                 value+=dp[i+1][j1+l][j2+k];
                            }
                            else
                            {
                                value=Integer.MIN_VALUE;
                            }
                            res=max(res,value);
                            }
                        }
                        dp[i][j1][j2]=res;
                    }
                }
            }
        return dp[0][0][m-1];
        
    }  
}