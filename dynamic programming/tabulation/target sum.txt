int f(int *arr,int n,int target)
{
    int dp[n+1][target+1];
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=1;
    }
    for(int j=1;j<=target;j++)
    {
        dp[0][j]=0;
    }
   
    
    for(int i=1;i<=n;i++)
    {
        printf("%d %d ",arr[i-1],i-1);
        for(int j=0;j<=target;j++)
        {
            int nottake=dp[i-1][j];
            int take=0;
            if(arr[i-1]<=j)
            {
                take=dp[i-1][j-arr[i-1]];
            }
            dp[i][j]=take+nottake;
         printf("%d ",dp[i][j]);
        }
        printf("\n");
      
    }
    printf("%d ",dp[n][target]);
    return dp[n][target];
}
int findTargetSumWays(int* arr, int n, int target) {
    int totalsum = 0;
    for (int i = 0; i < n; i++) {
        totalsum += arr[i];
    }
    
    if (totalsum - target < 0 || (totalsum - target) % 2 == 1) {
        return 0;
    }

    int subsetSum = (totalsum - target) / 2;
    int dp[n+1][subsetSum+1];
    memset(dp, -1, sizeof(dp));
    return f(arr, n , subsetSum);
}
