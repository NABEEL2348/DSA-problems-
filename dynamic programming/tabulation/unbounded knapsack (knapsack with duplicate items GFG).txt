#include<stdio.h>
#include<string.h>
#include<math.h>
int knapSack(int *val, int *wt, int capacity) {
        int n=sizeof(val)/sizeof(val[0]);
        int dp[n+1][capacity+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=capacity;j++)
            {
                dp[i][j]=0;
            }
        }
        
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=capacity;j++)
            {
                
                int nottake=dp[i-1][j];
                int take=0;
                if(wt[i-1]<=j)
                {
                    take=val[i-1]+dp[i][j-wt[i-1]];
                }
                dp[i][j]=fmax(take,nottake);
                printf("%d ",dp[i][j]);
                //System.out.print(dp[i][j]+" ");
            }
            printf("\n");
            //System.out.println();
        }
        return dp[n][capacity];
        
    }

int main()
{
    int val[] = {6, 1, 7, 7};
    int  wt[] = {1, 3, 4, 5};
    int capacity = 8;
    knapSack(val, wt, capacity);
}


in java

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while (t-- > 0) {
            int W = Integer.parseInt(in.readLine().trim());
            String line2[] = in.readLine().trim().split(" ");
            int N = line2.length;
            int val[] = new int[N];
            for (int i = 0; i < N; i++) val[i] = Integer.parseInt(line2[i]);
            String line3[] = in.readLine().trim().split(" ");
            int wt[] = new int[N];
            for (int i = 0; i < N; i++) wt[i] = Integer.parseInt(line3[i]);

            Solution ob = new Solution();
            System.out.println(ob.knapSack(val, wt, W));
            System.out.println("~");
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    static int max(int a,int b)
    {
        return (a>b)?a:b;
    }
    
    static int knapSack(int val[], int wt[], int capacity) {
        int n=val.length;
        int[][] dp=new int[n+1][capacity+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=capacity;j++)
            {
                dp[i][j]=0;
            }
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=capacity;j++)
            {
                
                int nottake=dp[i-1][j];
                int take=0;
                if(wt[i-1]<=j)
                {
                    take=val[i-1]+dp[i][j-wt[i-1]];
                }
                dp[i][j]=max(take,nottake);
         
                //System.out.print(dp[i][j]+" ");
            }
        
            //System.out.println();
        }
        return dp[n][capacity];
        
    }
}