#include<stdio.h>
static int i;
static int i=34;
int main()
{
     int a=6-4+3;//left to right
    printf("%d",a);
}


#include<stdio.h>

int main() {
    int a;
    a++ + 2;            // This expression has no effect unintialized
    printf("%d ", a++); // Post-increment operation: a is printed, then incremented
    printf("%d ", a++ + 2); // Post-increment operation: a + 2 is printed, then a is incremented
}


#include<stdio.h>
int main()
{
     int a=a++ + 2;
     
    printf("%d ",a++);
    printf("%d ",a++ + 2);
}//the value is assogned the first a output is 2






#include<stdio.h>
int main()
{
     for(int i=0;i<10;i++)
     {
    printf("%d ",3<<i);
     }
     printf("\n");
     int a=786;
     for(int i=0;i<10;i++)
     {
         
         if(a!=0)
         {
             printf("%d ",a>>i);
         }
         else
         {
             break;
         }
     }
     
    
}

#include<stdio.h>
int main()
{
    int a=54;
    int b=67;
    int num;
    num=sizeof(a) ? (b>23 ? ((a==54)? 'A':0):0):0;
    printf("%d",num);
}

#include<stdio.h>
int main()
{
    int var=(printf("%s\n","hello world!"),5);
    printf("%d",var);
}




#include<stdio.h>
int main()
{
    int var=(var=15,var+35);
    printf("%d",var);
}



#include<stdio.h>
int fun1()
{
    printf("hello");
    return 1;
}
int fun2()
{
    printf("world");
    return 1;
}
int main()
{
    int var = fun1() + fun2();
    printf("%d",var);
}

#include<stdio.h>
int main()
{
    int i=0;
    for(printf("one\n");i<3 && printf("");i++)
    {
        printf("hi!");
    }
    return 0;
}//zero length error in printf("");becaues it has no value in string;

#include<stdio.h>
int main()
{
    unsigned int i=500;
    while(i++!=0);
    printf("%d",i);
    return 0;
}//answer is 1


pascal triangle:
#include<stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=2*n-1;j++)
        {
            if(j>=n-(i-1) && j<=n+(i-1))
            {
                printf("*");
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }
}

#include<stdio.h>
int main()
{
    int num,res=0,rem;
    scanf("%d",&num);
    while(num!=0)//reverse a number
    {
        rem=num%10;
        num=num/10;
        res=res*10+rem;
    }
    printf("%d",res);
}





#include<stdio.h>
#include<math.h>
int main()
{
    int num,res,rem;
    scanf("%d",&num);
    int count;
    int temp=num;
    int temp1=num;
    while(num!=0)
    {
        count++;
        num=num/10;
    }
    
    while(temp!=0)
    {
        rem =temp %10;
        res=res+pow(rem,count);
        temp=temp/10;
    }
    if(res==temp1)
    {
        printf("the armstrong number");
    }
    else
    {
        printf("not an armstrong number");
    }
}

#include<stdio.h>
int main()
{
    int n,count=1;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(j<i || j==i)
            {
                printf("%d ",count++);
            }
        }
        printf("\n");
    }
}

#include<stdio.h>
#include<stdlib.h>
int compare(const void *a,const void *b)
{
    return (*(int *)a)-(*(int *)b);
}
int removeoccurances(int arr[],int n,int temp[])
{
    qsort(arr,n,sizeof(int),compare);
    int count1=0;
    for(int i=0;i<n;i++)
    {
        
        int count=0;
        if(arr[i]==arr[i+1])
        {
            count++;
        }
        else if(count!=0 && arr[i]!=arr[i+1])
        {
            count=0;
        }
        else if(count==0 && arr[i]!=arr[i+1])
        {
            temp[count1++]=arr[i];
        }
        
    }
    return count1;
}
int main()
{
    int arr[]={1,2,1,3,1};
    int n=sizeof(arr)/sizeof(arr[0]);
    int temp[n];
    int count1=removeoccurances(arr,n,temp);
    printf("%d ",count1);
    for(int i=0;i<count1;i++)
    {
        printf("%d ",temp[i]);
    }
}

floyd:
#include<stdio.h>
int main()
{
    int n,count=1;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(j<i || j==i)
            {
                printf("%d ",count++);
            }
        }
        printf("\n");
    }
}

#include<stdio.h>
int main()
{
    int n,count=1;
    scanf("%d",&n);
    for(int i=0;i<2;i++)
    {
        for(int j=1;j<=n;j++)
        {
            for(int k=0;k<n;k++)
            {
                printf("%d%d ",j,k);
            }
            printf("\n");
        }
        printf("\n");
    }
}

in static function reuse of same function is possible then what the change between the oops and structure oriented programming
ChatGPT
In both object-oriented programming (OOP) and structured programming, it is possible to reuse functions. However, the approach and organization of code differ significantly between the two paradigms.

Structural Programming:

In structured programming, functions are organized in a procedural manner.
Functions operate on data, and data is often passed between functions as parameters.
Code is organized around functions, which manipulate data.
Reusability is achieved through functions, but there's no inherent concept of encapsulation.
Data and functions are typically separated, leading to a clearer distinction between data structures and the operations performed on them.
Object-Oriented Programming:

In OOP, functions are encapsulated within objects.
Objects combine data and behavior (functions) into a single unit.
Reusability is achieved through inheritance and polymorphism.
Encapsulation allows for better control over access to data and functions, promoting data hiding and reducing coupling between different parts of the program.
OOP supports concepts like inheritance, where objects can inherit behavior (methods) and state (data) from other objects, and polymorphism, where objects of different types can be treated as objects of a common superclass.
The key differences lie in how data and functions are organized and accessed:

In structured programming, data and functions are typically separate, and functions operate on data.
In OOP, data and functions are encapsulated together within objects, promoting a more modular and reusable design.
In summary, while both structured and object-oriented programming support function reuse, the organization and principles of OOP, such as encapsulation, inheritance, and polymorphism, provide additional benefits for managing complexity and promoting code reuse in larger and more complex systems.




#include<stdio.h>
void odd();
void even();
void even(int n)
{
    if(n<=10)
    {
        printf("%d ",n-1);
        n++;
        odd(n);
    }
}
void odd(int n)
{
    if(n<=10)
    {
        printf("%d ",n+1);
        n++;
        even(n);
    }
}
int main()
{
    int num=1;
    odd(num);
}//odd or even

#include<stdio.h>
int main()
{
    int arr[]={1,2,3,4,5};
    int n=sizeof(arr)/sizeof(arr[0]);
    int sum=0,*p;
    for(p=&arr[0];p<=&arr[n-1];p++)
    {
        sum+=*p;
    }
    printf("%d",sum);
}