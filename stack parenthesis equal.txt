#include<string.h>
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct stacknode{
    int *arr;
    int top;
    unsigned capacity;
};
struct stacknode* createnode(unsigned capacity)
{
    struct stacknode* newnode=(struct stacknode*)malloc(sizeof(struct stacknode*));
    newnode->top=-1;
    newnode->capacity=capacity;
    newnode->arr=(int*)malloc(capacity*sizeof(int));
}
int push(struct stacknode* stack,char exp)
{
    return (stack->arr[++stack->top]);
}
char pop(struct stacknode* stack,char exp)
{
    return (stack->arr[++stack->top]);
}
int isempty(struct stacknode *stack)
{
    return (stack->top==-1);
}
bool isparenthesis(char exp[])
{
    struct stacknode* stack=createnode(strlen(exp));
    for(int i=0;i<exp[i];i++)
    {
        if(exp[i]=='{'||exp[i]=='('||exp[i]=='['||exp[i]=='<')
        {
            push(stack,exp[i]);
        }
        else if(exp[i]=='}'||exp[i]==')'||exp[i]==']'||exp[i]=='>')
        {
            if(isempty(stack))
            {
            return false;
            }
            return true;
        }
        char popped=pop(stack,exp[i]);
    }
    return isempty(stack);
}
int main()
{
    char exp[100];
    scanf("%s",exp);
    if((isparenthesis(exp)))
    {
        printf("balanced");
    }
    else{
        printf("not balanced");
    }
    
}



//annother method

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdbool.h>
bool parenthesis(char *exp1)
{
    int n=strlen(exp1);
    int stack[n];
    int top=-1;
    for(int i=0;exp1[i]!='\0';i++)
    {
        if(exp1[i]=='{' || exp1[i]=='[' || exp1[i]=='(' ||exp1[i]=='<' )
        {
            stack[++top]=exp1[i];
        }
        else if(exp1[i]=='}' || exp1[i]==']' || exp1[i]==')' ||exp1[i]=='>')
        {
            if(top==-1)
            {
                return false;
            }
            char popped = stack[top--];
            if((popped=='{' && exp1[i]=='}') || (popped=='[' && exp1[i]==']') ||(popped=='<' && exp1[i]=='>') ||(popped=='(' && exp1[i]==')'))
            {
                continue;
            }
            else
            {
                return false;
            }
            
        }

        
    }
    return top == -1;
}
int main()
{
    char exp1[100];
    scanf("%s",exp1);
    if(parenthesis(exp1))
    {
        printf("balanced");
    }
    else
    {
        printf("not balanced %d",parenthesis(exp1));
    }
}
