#include<stdio.h>
#include<stdlib.h>
#include<math.h>
struct node{
    int num;
    struct node *left,*right;
};
struct node *create(int num)
{
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
void findminmax(struct node *root,int *min,int *max,int hd)
{
    if(root==NULL)
    {
        return;
    }
    *min=fmin(*min,hd);
    *max=fmax(*max,hd);
    findminmax(root->left,min,max,hd-1);
    findminmax(root->right,min,max,hd+1);
}
int findtop(struct node *root,int min,int hd)
{
    if(root==NULL)
    {
        return 0;
    }
    if(hd==min)
    {
        int ans=0;
        ans=root->num;
        return ans;
    }
    findtop(root->left,min,hd-1);
}
int findtop1(struct node *root,int min,int hd)
{
    if(root==NULL)
    {
        return 0;
    }
    if(min==hd)
    {
        int ans=0;
        ans=root->num;
        return ans;
    }
    findtop1(root->right,min,hd+1);
}
int topview(struct node *root)
{
    if(root==NULL)
    {
        return 0;
    }
    int min=0,max=0;
    findminmax(root,&min,&max,0);
    for(int i=min;i<=max;i++)
    {
        if(i<0)
        {
            printf("%d ",findtop(root,i,0));
        }
        else 
        {
            printf("%d ",findtop1(root,i,0));
        }
        
    }
}
int main()
{
    struct node *root=create(10);
    root->left=create(20);
    root->right=create(30);
    root->left->left=create(40);
    root->left->right=create(50);
    root->right->left=create(60);
    root->right->right=create(70);
    topview(root);
}