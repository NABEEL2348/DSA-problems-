#include<stdio.h>
#include<stdbool.h>
#include<math.h>
#include<string.h>
int countpartition(int *arr,int n,int target,int dp[n+1][target+1])
{
    int mini=169;
    if(n==0)
    {
        if(target==0 && arr[0]==0)
        {
            return 2;
        }
        if(target==0 || target==arr[0])
        {
            return 1;
        }
        return 0;
    }
    if(target==0)
    {
        return 1;
    }
    if(dp[n][target]!=-1)
    {
        return dp[n][target];
    }
    int nottake=countpartition(arr,n-1,target,dp);
    int take=0;
    if(arr[n]<=target)
    {
        take=countpartition(arr,n-1,target-arr[n],dp);
    }
    dp[n][target] = take + nottake;
    return dp[n][target];
}
int main()
{
    int arr[]={5,2,6,4};
    int n=sizeof(arr)/sizeof(arr[0]);
    int target=0;
    
    for(int i=0;i<n;i++)
    {
        target+=arr[i];
    }
    int d=3;
    if(target-d<0 || (target-d) %2)
    {
        printf("no partition");
    }
    else
    {
        int dp[n+1][target+1];
        memset(dp,-1,sizeof(dp));
        printf("%d",countpartition(arr,n-1,target,dp));
    }
}