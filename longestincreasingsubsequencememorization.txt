#include<stdio.h>
#include<stdlib.h>
int sequence(int arr[],int n,int *memo,int current,int prev)
{
    if(current==n)
    {
        return 0;
    }
    if(memo[current]!=-1)
    {
        return memo[current];
    }
    int taken=0;
    if(arr[current]>prev)
    {
        taken=1+sequence(arr,n,memo,current+1,arr[current]);
    }
    int nottaken=sequence(arr,n,memo,current + 1,prev); 
    memo[current]=(taken > nottaken)?taken:nottaken;
    return memo[current];
}
int longestincreasingsubsequencememorization(int arr[],int n)
{
    int *memo=(int *)malloc(sizeof(int) * n);
    for(int i=0;i<n;i++)
    {
        memo[i]=-1;
    }
    sequence(arr,n,memo,0,-1);
    
}
int main()
{
    int arr[]={10,22,9,33,21,50,41,60};
    int n=sizeof(arr)/sizeof(arr[0]);
    printf("the longest increasing subsequence in memorization is  %d",longestincreasingsubsequencememorization(arr,n));
}