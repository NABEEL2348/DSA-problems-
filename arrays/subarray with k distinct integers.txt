#include<stdio.h>
int subarrawithldistinceintger(int *arr,int left,int n,int k)
{
    int count=0;
    if(k!=2)
    {
    int left1=left;
    int uniquecount=0;
    int hash[100]={0};
    
    while(left<=n)
    {
        if(hash[arr[left]]==0)
        {
             hash[arr[left]]++;
             uniquecount++;
        }
        else
        {
             hash[arr[left]]++;
        }
        printf("%d%d%d%d ",left,left1,count,uniquecount);
        if(uniquecount>k)
        {
            uniquecount--;
            hash[arr[left1]]--;
            left1++;
        }
        if(uniquecount==k)
        {
            count++;
            if(uniquecount==k && (left-left1)+1!=k)
            {
                
                    count++;
                    left1++;
                
            }
        }
        
       
        left++;
    }
    }
    else
    {
        
    int left1=left;
    int uniquecount=0;
    int ans=0;
    int hash[100]={0};
    while(left<=n)
    {
        if(hash[arr[left]]==0)
        {
            hash[arr[left]]++;
            uniquecount++;
        }
        else
        {
            hash[arr[left]]++;
        }
        if(uniquecount>k)
        {
            while(hash[arr[left1]]!=0)
            {
                hash[arr[left1]]--;
                
                if(hash[arr[left1]]==0)
                {
                    left1++;
                    break;
                }
                left1++;
            }
            uniquecount--;
        }
        if(uniquecount==k)
        {
            count+=left-left1;
        }
        printf("%d ",hash[arr[left1]]);
        //printf("%d ",count);
        left++;
    }
    }
    return count;
}
int main()
{
    int arr[]={1,2,3,4,5};
    int k=1;
    int n=sizeof(arr)/sizeof(arr[0]);
    printf("count :%d ",subarrawithldistinceintger(arr,0,n-1,k));
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to return the count of subarrays
// with at most K distinct elements using
// the sliding window technique
int atMostK(int arr[], int n, int k) {
    int count = 0;
    int left = 0;
    int right = 0;
    int map[100000] = {0}; // Assuming the elements in arr are within the range of 0 to 99999
    int distinctCount = 0;

    while (right < n) {
        if (map[arr[right]] == 0) {
            distinctCount++;
        }
        map[arr[right]]++;

        while (distinctCount > k) {
            map[arr[left]]--;
            if (map[arr[left]] == 0) {
                distinctCount--;
            }
            left++;
        }

        count += right - left + 1;
        right++;
    }

    return count;
}

// Function to return the count of subarrays
// with exactly K distinct elements
int exactlyK(int arr[], int n, int k) {
    return atMostK(arr, n, k) - atMostK(arr, n, k - 1);
}

// Driver code
int main() {
    int arr[] = {1,2,1,2,3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int k = 2;

    printf("%d\n", exactlyK(arr, n, k));
    return 0;
}
