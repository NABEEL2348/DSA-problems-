#include<stdio.h>
#include<stdlib.h>
struct node{
    int num;
    struct node *left,*right;
};
struct node *create(int num)
{
    struct node *newnode=(struct node*)malloc(sizeof(struct node));
    newnode->num=num;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
}
int printleftview(struct node *root)
{
    if(root->left)
    {
        printf("%d ",root->num);
        printleftview(root->left);
    }
    else if(root->right)
    {
       printf("%d ",root->num);
       printleftview(root->right);
    }
}
int printleaves(struct node *root)
{
    if(root)
    {
        printleaves(root->left);
        if(!(root->left) && !(root->right))
        {
            printf("%d ",root->num);
        }
        printleaves(root->right);
    }
}
int printrightview(struct node *root)
{
    if(root->right)
    {
        
        printrightview(root->right);
        printf("%d ",root->num);
    }
    else if(root->left)
    {
        
        printrightview(root->left);
        printf("%d ",root->num);
    }
}
int printboundaryview(struct node *root)
{
    if(root)
    {
        printf("%d ",root->num);
    }
    printleftview(root->left);
    printleaves(root->left);
    printleaves(root->right);
    printrightview(root->right);
}
int main()
{
    struct node *root=create(1);
    root->left=create(2);
    root->left->left=create(3);
    root->left->left->right=create(4);
    root->left->left->right->left=create(5);
    root->left->left->right->right=create(6);
    root->right=create(7);
    root->right->right=create(8);
    root->right->right->left=create(9);
    root->right->right->left->left=create(10);
    root->right->right->left->right=create(11);
    printf("the boundary view of tree is: ");
    printboundaryview(root);
    
}