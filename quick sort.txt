#include<stdio.h>
int swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int partition(int *arr,int low,int high)
{
    int pivot=arr[low];
    int i=low;
    int j=high;
    while(i<j)
    {
        while(arr[i]<=pivot && i<=high)
        {
            i++;
        }
        while(arr[j]>pivot && j>=low)
        {
            j--;
        }
        if(i<j)
        {
            swap(&arr[i],&arr[j]);
        }
    }
    swap(&arr[j],&arr[low]);
    return j;
}
int quicksort(int *arr,int low,int high)
{
    if(low<high)
    {
        int pi=partition(arr,low,high);
        quicksort(arr,low,pi-1);
        quicksort(arr,pi+1,high);
    }
}
int main()
{
    int arr[]={4,6,2,5,7,9,1,3};
    int n=sizeof(arr)/sizeof(arr[0]);
    quicksort(arr,0,n-1);
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
}
//ascending order
#include<stdio.h>
int swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int pielement(int *arr,int left,int right)
{
    int i=left;
    int j=right;
    int pivot=arr[left];
    
    while(i<j)
    {
        while(arr[i]<=pivot && i<=right)
        {
            i++;
        }
        while(arr[j]>pivot && j>=left)
        {
            j--;
        }
        if(i<j)
        {
            swap(&arr[i],&arr[j]);
            
        }
        
    }
    swap(&arr[j],&arr[left]);
    return j;
}
int quicksort(int *arr,int left,int right)
{
    if(left<right)
    {
        int pi=pielement(arr,left,right);
        quicksort(arr,left,pi);
        quicksort(arr,pi+1,right);
    }
}
int main()
{
    int arr[]={7, 10, 4, 3, 20, 15};
    int n=sizeof(arr)/sizeof(arr[0]);
    quicksort(arr,0,n-1);
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    int k=4;
    printf("third smallest %d ",arr[k-1]);
}

//descending order

#include<stdio.h>
int swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int pielement(int *arr,int left,int right)
{
    int i=left;
    int j=right;
    int pivot=arr[left];
    
    while(i<j)
    {
        while(arr[i]>=pivot && i<=right)
        {
            i++;
        }
        while(arr[j]<pivot && j>=left)
        {
            j--;
        }
        if(i<j)
        {
            swap(&arr[i],&arr[j]);
            
        }
        
    }
    swap(&arr[j],&arr[left]);
    return j;
}
int quicksort(int *arr,int left,int right)
{
    if(left<right)
    {
        int pi=pielement(arr,left,right);
        quicksort(arr,left,pi);
        quicksort(arr,pi+1,right);
    }
}
int main()
{
    int arr[]={7, 10, 4, 3, 20, 15};
    int n=sizeof(arr)/sizeof(arr[0]);
    quicksort(arr,0,n-1);
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }
    int k=4;
    printf("third smallest %d ",arr[k-1]);
}